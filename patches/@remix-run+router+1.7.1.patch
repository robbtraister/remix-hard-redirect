diff --git a/node_modules/@remix-run/router/dist/router.cjs.js b/node_modules/@remix-run/router/dist/router.cjs.js
index c8d73de..da5afaa 100644
--- a/node_modules/@remix-run/router/dist/router.cjs.js
+++ b/node_modules/@remix-run/router/dist/router.cjs.js
@@ -1398,6 +1398,9 @@ const redirect = function redirect(url, init) {
   }
   let headers = new Headers(responseInit.headers);
   headers.set("Location", url);
+  if (responseInit.reloadDocument) {
+    headers.set("X-Remix-Reload-Document", "true");
+  }
   return new Response(null, _extends({}, responseInit, {
     headers
   }));
@@ -2597,18 +2600,30 @@ function createRouter(init) {
       _isFetchActionRedirect: true
     } : {}));
     invariant(redirectLocation, "Expected a location on the redirect navigation");
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
+      }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
       }
+      return;
     }
 
     // There's no need to abort on redirects, since we don't detect the
@@ -3813,7 +3828,8 @@ async function callLoaderOrAction(type, request, match, matches, manifest, mapRo
         type: ResultType.redirect,
         status,
         location,
-        revalidate: result.headers.get("X-Remix-Revalidate") !== null
+        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
       };
     }
 
diff --git a/node_modules/@remix-run/router/dist/router.js b/node_modules/@remix-run/router/dist/router.js
index 50611e6..0d93e81 100644
--- a/node_modules/@remix-run/router/dist/router.js
+++ b/node_modules/@remix-run/router/dist/router.js
@@ -1153,6 +1153,9 @@ const redirect = function redirect(url, init) {
   }
   let headers = new Headers(responseInit.headers);
   headers.set("Location", url);
+  if (responseInit.reloadDocument) {
+    headers.set("X-Remix-Reload-Document", "true");
+  }
   return new Response(null, _extends({}, responseInit, {
     headers
   }));
@@ -2196,18 +2199,30 @@ function createRouter(init) {
       _isFetchActionRedirect: true
     } : {}));
     invariant(redirectLocation, "Expected a location on the redirect navigation");
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
+      }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
       }
+      return;
     }
     // There's no need to abort on redirects, since we don't detect the
     // redirect until the action/loaders have settled
@@ -3360,7 +3375,8 @@ async function callLoaderOrAction(type, request, match, matches, manifest, mapRo
         type: ResultType.redirect,
         status,
         location,
-        revalidate: result.headers.get("X-Remix-Revalidate") !== null
+        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
       };
     }
     // For SSR single-route requests, we want to hand Responses back directly
diff --git a/node_modules/@remix-run/router/dist/router.umd.js b/node_modules/@remix-run/router/dist/router.umd.js
index 40139d3..7b77e33 100644
--- a/node_modules/@remix-run/router/dist/router.umd.js
+++ b/node_modules/@remix-run/router/dist/router.umd.js
@@ -1400,6 +1400,9 @@
     }
     let headers = new Headers(responseInit.headers);
     headers.set("Location", url);
+    if (responseInit.reloadDocument) {
+      headers.set("X-Remix-Reload-Document", "true");
+    }
     return new Response(null, _extends({}, responseInit, {
       headers
     }));
@@ -2599,18 +2602,30 @@
         _isFetchActionRedirect: true
       } : {}));
       invariant(redirectLocation, "Expected a location on the redirect navigation");
-      // Check if this an absolute external redirect that goes to a new origin
-      if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-        let url = init.history.createURL(redirect.location);
-        let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-        if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-          if (replace) {
-            routerWindow.location.replace(redirect.location);
-          } else {
-            routerWindow.location.assign(redirect.location);
-          }
-          return;
+      // Check if this redirect should be a document reload
+      const isReloadDocument = (thisOrigin) => {
+        if (redirect.reloadDocument) {
+          return true;
+        }
+        if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+          return false;
+        }
+
+        const url = init.history.createURL(redirect.location);
+        if (thisOrigin !== url.origin) {
+          return true;
+        }
+
+        const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+        return isDifferentBasename;
+      }
+      if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+        if (replace) {
+          routerWindow.location.replace(redirect.location);
+        } else {
+          routerWindow.location.assign(redirect.location);
         }
+        return;
       }
 
       // There's no need to abort on redirects, since we don't detect the
@@ -3815,7 +3830,8 @@
           type: ResultType.redirect,
           status,
           location,
-          revalidate: result.headers.get("X-Remix-Revalidate") !== null
+          revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+          reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
         };
       }
 
diff --git a/node_modules/@remix-run/router/dist/utils.d.ts b/node_modules/@remix-run/router/dist/utils.d.ts
index 1e5e238..2c49095 100644
--- a/node_modules/@remix-run/router/dist/utils.d.ts
+++ b/node_modules/@remix-run/router/dist/utils.d.ts
@@ -442,7 +442,7 @@ export declare class DeferredData {
 }
 export type DeferFunction = (data: Record<string, unknown>, init?: number | ResponseInit) => DeferredData;
 export declare const defer: DeferFunction;
-export type RedirectFunction = (url: string, init?: number | ResponseInit) => Response;
+export type RedirectFunction = (url: string, init?: number | (ResponseInit & { reloadDocument?: boolean })) => Response;
 /**
  * A redirect response. Sets the status code and the `Location` header.
  * Defaults to "302 Found".
diff --git a/node_modules/@remix-run/router/router.ts b/node_modules/@remix-run/router/router.ts
index 785ec73..ce98bf4 100644
--- a/node_modules/@remix-run/router/router.ts
+++ b/node_modules/@remix-run/router/router.ts
@@ -2072,19 +2072,30 @@ export function createRouter(init: RouterInit): Router {
       redirectLocation,
       "Expected a location on the redirect navigation"
     );
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin: string) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
       }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
+      }
+      return;
     }
 
     // There's no need to abort on redirects, since we don't detect the
@@ -3689,6 +3700,7 @@ async function callLoaderOrAction(
         status,
         location,
         revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Docment") !== null,
       };
     }
 
diff --git a/node_modules/@remix-run/router/utils.ts b/node_modules/@remix-run/router/utils.ts
index 6c7796e..7bd688c 100644
--- a/node_modules/@remix-run/router/utils.ts
+++ b/node_modules/@remix-run/router/utils.ts
@@ -43,6 +43,7 @@ export interface RedirectResult {
   status: number;
   location: string;
   revalidate: boolean;
+  reloadDocument?: boolean;
 }
 
 /**
@@ -1441,7 +1442,7 @@ export const defer: DeferFunction = (data, init = {}) => {
 
 export type RedirectFunction = (
   url: string,
-  init?: number | ResponseInit
+  init?: number | (ResponseInit & { reloadDocument?: boolean })
 ) => Response;
 
 /**
@@ -1458,6 +1459,9 @@ export const redirect: RedirectFunction = (url, init = 302) => {
 
   let headers = new Headers(responseInit.headers);
   headers.set("Location", url);
+  if (responseInit.reloadDocument) {
+    headers.set("X-Remix-Reload-Document", "true");
+  }
 
   return new Response(null, {
     ...responseInit,
