diff --git a/node_modules/@remix-run/router/dist/router.cjs.js b/node_modules/@remix-run/router/dist/router.cjs.js
index c8d73de..3d0988a 100644
--- a/node_modules/@remix-run/router/dist/router.cjs.js
+++ b/node_modules/@remix-run/router/dist/router.cjs.js
@@ -2597,18 +2597,30 @@ function createRouter(init) {
       _isFetchActionRedirect: true
     } : {}));
     invariant(redirectLocation, "Expected a location on the redirect navigation");
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
       }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
+      }
+      return;
     }
 
     // There's no need to abort on redirects, since we don't detect the
@@ -3813,7 +3825,8 @@ async function callLoaderOrAction(type, request, match, matches, manifest, mapRo
         type: ResultType.redirect,
         status,
         location,
-        revalidate: result.headers.get("X-Remix-Revalidate") !== null
+        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
       };
     }
 
diff --git a/node_modules/@remix-run/router/dist/router.js b/node_modules/@remix-run/router/dist/router.js
index 50611e6..ecadff8 100644
--- a/node_modules/@remix-run/router/dist/router.js
+++ b/node_modules/@remix-run/router/dist/router.js
@@ -2196,18 +2196,30 @@ function createRouter(init) {
       _isFetchActionRedirect: true
     } : {}));
     invariant(redirectLocation, "Expected a location on the redirect navigation");
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
       }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
+      }
+      return;
     }
     // There's no need to abort on redirects, since we don't detect the
     // redirect until the action/loaders have settled
@@ -3360,7 +3372,8 @@ async function callLoaderOrAction(type, request, match, matches, manifest, mapRo
         type: ResultType.redirect,
         status,
         location,
-        revalidate: result.headers.get("X-Remix-Revalidate") !== null
+        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
       };
     }
     // For SSR single-route requests, we want to hand Responses back directly
diff --git a/node_modules/@remix-run/router/dist/router.umd.js b/node_modules/@remix-run/router/dist/router.umd.js
index 40139d3..b407d65 100644
--- a/node_modules/@remix-run/router/dist/router.umd.js
+++ b/node_modules/@remix-run/router/dist/router.umd.js
@@ -2599,18 +2599,30 @@
         _isFetchActionRedirect: true
       } : {}));
       invariant(redirectLocation, "Expected a location on the redirect navigation");
-      // Check if this an absolute external redirect that goes to a new origin
-      if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-        let url = init.history.createURL(redirect.location);
-        let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-        if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-          if (replace) {
-            routerWindow.location.replace(redirect.location);
-          } else {
-            routerWindow.location.assign(redirect.location);
-          }
-          return;
+      // Check if this redirect should be a document reload
+      const isReloadDocument = (thisOrigin) => {
+        if (redirect.reloadDocument) {
+          return true;
+        }
+        if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+          return false;
+        }
+
+        const url = init.history.createURL(redirect.location);
+        if (thisOrigin !== url.origin) {
+          return true;
         }
+
+        const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+        return isDifferentBasename;
+      }
+      if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+        if (replace) {
+          routerWindow.location.replace(redirect.location);
+        } else {
+          routerWindow.location.assign(redirect.location);
+        }
+        return;
       }
 
       // There's no need to abort on redirects, since we don't detect the
@@ -3815,7 +3827,8 @@
           type: ResultType.redirect,
           status,
           location,
-          revalidate: result.headers.get("X-Remix-Revalidate") !== null
+          revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+          reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
         };
       }
 
diff --git a/node_modules/@remix-run/router/router.ts b/node_modules/@remix-run/router/router.ts
index 785ec73..ce98bf4 100644
--- a/node_modules/@remix-run/router/router.ts
+++ b/node_modules/@remix-run/router/router.ts
@@ -2072,19 +2072,30 @@ export function createRouter(init: RouterInit): Router {
       redirectLocation,
       "Expected a location on the redirect navigation"
     );
-    // Check if this an absolute external redirect that goes to a new origin
-    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {
-      let url = init.history.createURL(redirect.location);
-      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
-
-      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
-        if (replace) {
-          routerWindow.location.replace(redirect.location);
-        } else {
-          routerWindow.location.assign(redirect.location);
-        }
-        return;
+    // Check if this redirect should be a document reload
+    const isReloadDocument = (thisOrigin: string) => {
+      if (redirect.reloadDocument) {
+        return true;
+      }
+      if (!ABSOLUTE_URL_REGEX.test(redirect.location)) {
+        return false;
+      }
+
+      const url = init.history.createURL(redirect.location);
+      if (thisOrigin !== url.origin) {
+        return true;
       }
+
+      const isDifferentBasename = stripBasename(url.pathname, basename) == null;
+      return isDifferentBasename;
+    }
+    if (isBrowser && isReloadDocument(routerWindow.location.origin)) {
+      if (replace) {
+        routerWindow.location.replace(redirect.location);
+      } else {
+        routerWindow.location.assign(redirect.location);
+      }
+      return;
     }
 
     // There's no need to abort on redirects, since we don't detect the
@@ -3689,6 +3700,7 @@ async function callLoaderOrAction(
         status,
         location,
         revalidate: result.headers.get("X-Remix-Revalidate") !== null,
+        reloadDocument: result.headers.get("X-Remix-Reload-Docment") !== null,
       };
     }
 
diff --git a/node_modules/@remix-run/router/utils.ts b/node_modules/@remix-run/router/utils.ts
index 6c7796e..1a769dc 100644
--- a/node_modules/@remix-run/router/utils.ts
+++ b/node_modules/@remix-run/router/utils.ts
@@ -43,6 +43,7 @@ export interface RedirectResult {
   status: number;
   location: string;
   revalidate: boolean;
+  reloadDocument?: boolean;
 }
 
 /**
